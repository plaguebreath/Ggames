<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_fokker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Instance variables
standardallignsprite = image_yscale; 
isplanelanded = false;
isplanecrashed = false;
isplanestall = false;
speedplanemax = 10;
turnfactor = 2;
takeoffspeed = 4;
facceleration = 0.10;
enginestarted = false;

timeInitmg = current_time;
timeCurrentmg = current_time;
fireintervalmg = 200; // interval between fire in milliseconds
offsetlenmg = 32;  // posizione asse x

timeInitbomb = current_time;
timeCurrentbomb = current_time;
fireintervalbomb = 1000; // interval between fire in milliseconds
offsetlenbomb = -5;  // posizione asse x

bullets = 1000;
bombs = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// variables
//global.runway = false;
//global.isplanecrashed = false;
image_speed = 1;
//On press of BackSpace reset position of plane
restart = keyboard_check(vk_backspace);
if (restart){
  y = obj_ground.y - obj_ground.sprite_height ;
  x = 60;
  gravity = 0;
  speed = 0;
  direction =0;
  image_yscale = abs(image_yscale) ;
  enginestarted = false
  audio_sound_gain(snd_enginestart,0,0.5);  
  audio_sound_gain(snd_engine1,0,0.5);              
}
// Check if the plane over the upper limit of the room about 200px he go on STALL
if (room_height - y &gt; room_height + 200){
  isplanestall = true;
  direction = 270;
  speed = 0;
}else{
  isplanestall = false;
} 

// Check for plane outside the borders of the room
if x  &gt; room_width + sprite_width || x  &lt; 0-sprite_width{
//X borders bounce on opposite direction
  direction = 180 - direction;
}
// Take care of the flip of image based on the direction
if (direction &gt;= 90 &amp;&amp; direction &lt;= 270){
  image_yscale = -1 * standardallignsprite;
}else{
  image_yscale = standardallignsprite;
}
  
/// Check Collision on ground and if touch the landing runway
if  place_meeting(x,y+vspeed -10,obj_ground){
  if  place_meeting(x,y+vspeed,obj_runway){
    y = obj_ground.y - obj_ground.sprite_height ;
    isplanelanded =  true;
    isplanecrashed =  false;
  }else{
    isplanelanded =  false;
    isplanecrashed =  true;
  }
  gravity = 0;
  speed = 0;
  direction =0;
  //enginestarted = false;
}else{
  if !(isplanelanded)
  {
    if speed &gt; speedplanemax{
      speed = speedplanemax;
      gravity = 0;
    }else if speed &gt; speedplanemax / 3 {
      gravity = 0.005;
    }else{
      gravity = 0.35;
    }
  }
}

/// Execute Script movement plane object
if !(isplanecrashed){
  scr_moveplane();
}else{
  sprite_index = sp_fokkercrash;
  image_speed = 0.2;
  if (image_index &gt;= image_number - 1) 
    image_speed = 0;
}

if (enginestarted){
     //if !audio_is_playing(snd_enginestart){
         audio_play_sound(snd_enginestart,1,false); 
         audio_sound_gain(snd_enginestart,1,0.5);  
         audio_play_sound(snd_engine1,0,true);
         audio_sound_gain(snd_engine1,0,0.5);              
         enginestarted = false; 
     //}   
}
if (speed &gt;1){
  //audio_sound_gain(snd_enginestart,0,0.5); 
  audio_sound_gain(snd_engine1,1,0.5);     
  audio_sound_pitch(snd_engine1, speed * 10 / 80); 
}
//if (speed &gt;=4){
  //audio_sound_gain(snd_enginestart,0,0.5); 
  //audio_sound_gain(snd_engine1,1,1.5);      
//}

// Update Object Text with values after movement of plane
global.speedtxt = speed;
global.angletxt = direction;
global.altitudetxt = room_height - y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw self based on Sprite
draw_self()
//Draw Bounding Box around Object
draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
