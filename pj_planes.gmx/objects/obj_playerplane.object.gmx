<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_fokker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//var em_player;

depth = -100;
image_xscale = 0.35;
image_yscale = 0.35;

//Call reset position
scr_planesetonrunway(id);

//Instance variables
standardallignsprite = image_yscale; 
isreloading = false;
isplanetakeoff = true;
isplanelanded = true;
isplaneonrunway = true;
isplanecrashed = false;
isplanestall = false;
speedplanemax = 10;
turnfactor = 2;
turnvalue = 0;
takeoffspeed = 4;
facceleration = 0.10;
fvalue = 0;
enginestarted = false;
altitude = 0;

timeInitmg = current_time;
timeCurrentmg = current_time;
fireintervalmg = 200; // interval between fire in milliseconds
offsetlenmg = 32;  // posizione asse x

timeInitbomb = current_time;
timeCurrentbomb = current_time;
fireintervalbomb = 1000; // interval between fire in milliseconds
offsetlenbomb = -5;  // posizione asse x

timebeforereloadbullets = 500;
timeInitbullets = current_time;
timeCurrentbullets = current_time;
MAX_bullets = 1000;
bullets = MAX_bullets;
timebeforereloadbombs = 1000;
timeInitbombs = current_time;
timeCurrentbombs = current_time;
MAX_bombs = 10;
bombs = MAX_bombs;

timeCurrentlanded = current_time; 
timeInitlanded  = current_time; 
timeonrunway = 4000;

timeCurrentstall = current_time; 
timeInitstall = current_time; 
timeforstall = 2000;

gravityplane = 0.20;

restart = false;

soundexplosionplayed=0;
  
em_player =  audio_emitter_create();

audio_listener_orientation(x, y, 1000, 0, 0, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_emitter_free(em_player);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_xview = ((x -view_wview/2)+view_xview*9)/10 + hspeed
view_yview = ((y -view_hview/2)+view_yview*9)/10 + vspeed

if view_xview &lt; 0
    view_xview = 0
if view_yview &lt; 0
    view_yview = 0
if view_xview &gt; room_width-view_wview
    view_xview = room_width-view_wview
if view_yview &gt; room_height-view_hview
    view_yview = room_height-view_hview
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 1;
turnvalue = 0;
fvalue = 0;

if (restart){
  scr_restart(id);
}else{
  //On press of BackSpace reset position of plane
  if keyboard_check_pressed(vk_backspace){
    restart = true;
  }else{
     // Collisions check
    if  place_meeting(x,y + vspeed + 2 ,obj_runway){    
      if (direction &gt;= 210 &amp;&amp; direction &lt;= 330){
        isplanecrashed = true;
      }else{
        isplaneonrunway = true;
      }            
    }else{
      if  place_meeting(x,y+vspeed -10,obj_ground){
        isplanecrashed = true;
      }else{
        if (room_height - y &gt; room_height + 200){
          isplanestall = true;
          direction = 270;
          speed = 0;  
        } 
        isplaneonrunway = false;
      }
    }
    // If plane crashed execute animation
    if (isplanecrashed){
      sprite_index = sp_fokkercrash;
      image_speed = 0.2;
      if (image_index &gt;= image_number - 1) image_speed = 0;
      // Process sounds of crash
      scr_planesound(id,2);    
    }else{
      sprite_index = sp_fokker;
    }    
    // Check if plane is just landed
    scr_isplanelanded(id);
    // if it's just landed then procede to reloading if needed
    if (isreloading) scr_refuel(id); 
    
    if (isplanestall) {
     // randomize();
     // valorarotazione = 1;
     // testroll = random_range(0, 1);
     // if (testroll &lt; 0.5) valorarotazione = -1;
     // image_yscale = valorarotazione * abs(image_yscale); 
      scr_planestall(id);
      //show_debug_message(valorarotazione);
    }
    
    // Process Movements
    scr_moveplane(id);
    // Movement logic
    scr_movelogic(id);
    // Check for Border bump and orientation
    scr_borderandflip(id);    
    // Process sounds of engine
    scr_planesound(id,0);  
  }
}

// Update Values of variables
altitude = room_height - (y + sprite_height * image_yscale);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//Draw self based on Sprite
draw_self()
//Draw Bounding Box around Object
draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,1)

// Assign sprite rotation direction same as object direction
image_angle =direction;

// Assign sprite rotation direction same as object direction
//idplane.image_angle =idplane.direction;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
